}else{"That is wrong"}
})
}
shinyApp(ui=ui,server=server)
fiblength=200
fib=vector(0,fiblength)
fib=vector(1,fiblength)
fib[2]=1
fib=rep(0,fiblength)
fib[2]=1
fiblength=200
fib=rep(0,fiblength)
fib[2]=1
for (i in 3:fiblength){
fib[i]=fib[i-2]+fib[i-1]
}
fib
as.integer(fib)
as.numeric(fib)
fiblength=200
fib=rep(0,fiblength)
fib
fib[2]=1
fib
for (i in 3:fiblength){
fib[i]=fib[i-2]+fib[i-1]
}
fib
vector(numeric,10)
vector(integer,10)
vector(mode='integer',10)
fib=vector(mode="integer",fiblength)
fib[2]=1
for (i in 3:fiblength){
fib[i]=fib[i-2]+fib[i-1]
}
fib
sqrt(fib)
fib_sqrt=sqrt(fib)
fib_norm_sqrt=as.data.frame(c(fib,fib_sqrt))
as.data.frame(c(fib,fib_sqrt))
round(sqrt(fib), digits = 2)
c(fib,fib_sqrt)
fib_norm_sqrt=as.data.frame(cbind(fib,fib_sqrt))
as.data.frame(cbind(fib,fib_sqrt))
rep(c(0,1),200)
rep(c(0,1),fiblength/2)
fib_together=cbind(fib_together,fib_group)
fib_together=as.data.frame(cbind(fib,fib_sqrt))
fib_together=cbind(fib_together,fib_group)
fib_group=rep(c(0,1),fiblength/2)
fib_together=cbind(fib_together,fib_group)
fib_groups_lable=fib_together[c(1,2),fib_groups==1]
fib_groups=rep(c(0,1),fiblength/2)
fib_groups_lable=fib_together[c(1,2),fib_groups==1]
fib_together=cbind(fib_together,fib_groups)
fib_groups_lable=fib_together[c(1,2),fib_groups==1]
fib_together
fib_together=as.data.frame(cbind(fib,fib_sqrt))
fib_groups=rep(c(0,1),fiblength/2)
fib_together=cbind(fib_together,fib_groups)
fib_groups_lable=fib_together[c(1,2),fib_groups==1]
fib_groups==1
c(1,2)
fib_together[1,]
fib_groups_lable=fib_together[fib_groups==1,c(1,2)]
fib_groups_lable
fib_together
fib_groups==1
fib_together[fib_groups==1,c(1,2)]
fib_group1=fib_together[fib_groups==0,c(1,2)]
fib_group2=fib_together[fib_groups==1,c(1,2)]
fib_groups_lable=cbind(fib_group1,fib_group2)
View(fib_group2)
View(fib_groups_lable)
vector(length = ncol(mydata))
vector(length = ncol(10))
vector(mode="integer",ncol(mydata))
vector(mode="integer",ncol(10))
vector(length = 1110)
mean.column=vector(mode="haracter",ncol(mydata))
vector(mode="character",10)
for (i in 1:ncol(mydata)){
name.column[i]=names(mydata)[i]
mean.column[i]=avg(mydata[,i])
length.column=length(mydata[,i])
min.column=min(mydata[,i])
max.column=max(mydata[,i])
}
give.summary <- function(mydata){
mean.column=vector(mode="character",ncol(mydata))
mean.column=vector(mode="integer",ncol(mydata))
length.column=vector(mode="integer",ncol(mydata))
min.column=vector(mode="integer",ncol(mydata))
max.column=vector(mode="integer",ncol(mydata))
for (i in 1:ncol(mydata)){
name.column[i]=names(mydata)[i]
mean.column[i]=avg(mydata[,i])
length.column=length(mydata[,i])
min.column=min(mydata[,i])
max.column=max(mydata[,i])
}
matrix(name.column,mean.column,length.column,min.column,max.column)
}
give.summary(fib_groups_lable)
mydata=fib_groups_lable
mean.column=vector(mode="character",ncol(mydata))
mean.column=vector(mode="integer",ncol(mydata))
length.column=vector(mode="integer",ncol(mydata))
min.column=vector(mode="integer",ncol(mydata))
max.column=vector(mode="integer",ncol(mydata))
for (i in 1:ncol(mydata)){
name.column[i]=names(mydata)[i]
mean.column[i]=avg(mydata[,i])
length.column=length(mydata[,i])
min.column=min(mydata[,i])
max.column=max(mydata[,i])
}
name.column=vector(mode="character",ncol(mydata))
name.column=vector(mode="character",ncol(mydata))
for (i in 1:ncol(mydata)){
name.column[i]=names(mydata)[i]
mean.column[i]=avg(mydata[,i])
length.column=length(mydata[,i])
min.column=min(mydata[,i])
max.column=max(mydata[,i])
}
mean.column[i]=mean(mydata[,i])
matrix(name.column,mean.column,length.column,min.column,max.column)
as.table(name.column,mean.column,length.column,min.column,max.column)
name.column
name.column=vector(mode="character",ncol(mydata))
mean.column=vector(mode="integer",ncol(mydata))
length.column=vector(mode="integer",ncol(mydata))
min.column=vector(mode="integer",ncol(mydata))
max.column=vector(mode="integer",ncol(mydata))
for (i in 1:ncol(mydata)){
name.column[i]=names(mydata)[i]
mean.column[i]=mean(mydata[,i])
length.column=length(mydata[,i])
min.column=min(mydata[,i])
max.column=max(mydata[,i])
}
as.table(name.column,mean.column,length.column,min.column,max.column)
name.column
mean.column
length.column
min.column
max.column
as.table(1,2)
as.table(1,2,5,6)
as.table(c(name.column,mean.column,length.column,min.column,max.column))
as.table(rbind(name.column,mean.column,length.column,min.column,max.column))
summaryinfo=as.table(rbind(mean.column,length.column,min.column,max.column))
names(summaryinfo)=name.column
summaryinfo
colnames(summaryinfo)=name.column
summaryinfo
for (i in 1:ncol(mydata)){
name.column[i]=names(mydata)[i]
mean.column[i]=mean(mydata[,i])
length.column=length(mydata[,i])
min.column=min(mydata[,i])
max.column=max(mydata[,i])
}
give.summary <- function(mydata){
name.column=vector(mode="character",ncol(mydata))
mean.column=vector(mode="integer",ncol(mydata))
length.column=vector(mode="integer",ncol(mydata))
min.column=vector(mode="integer",ncol(mydata))
max.column=vector(mode="integer",ncol(mydata))
for (i in 1:ncol(mydata)){
name.column[i]=names(mydata)[i]
mean.column[i]=mean(mydata[,i])
length.column=length(mydata[,i])
min.column=min(mydata[,i])
max.column=max(mydata[,i])
}
summaryinfo=as.table(rbind(mean.column,length.column,min.column,max.column))
colnames(summaryinfo)=name.column
summaryinfo
}
give.summary(fib_groups_lable)
plot(fib_group1)
plot(fib_group2)
plot(fib_group1$fib,fib_group2$fib)
fib_groups_label=paste("Group",fib_groups+1)
fib_groups_label
plot(fib_group1$fib)
lines(fib_group2$fib)
lines(fib_group2$fib, col="red")
lines(fib_group1$fib_sqrt, col="blue")
give.summary(fib_groups_lable)
give.summary(fib_group1)
give.summary(fib_group2)
give.summary <- function(mydata){
name.column=vector(mode="character",ncol(mydata))
mean.column=vector(mode="integer",ncol(mydata))
length.column=vector(mode="integer",ncol(mydata))
min.column=vector(mode="integer",ncol(mydata))
max.column=vector(mode="integer",ncol(mydata))
for (i in 1:ncol(mydata)){
name.column[i]=names(mydata)[i]
mean.column[i]=mean(mydata[,i])
length.column=length(mydata[,i])
min.column=min(mydata[,i])
max.column=max(mydata[,i])
}
summaryinfo=as.table(rbind(mean.column,length.column,min.column,max.column))
colnames(summaryinfo)=name.column
rownames(summaryinfo)=c("Mean","Length","Min","Max")
summaryinfo
}
give.summary(fib_group1)
give.summary(fib_group2)
cor(fib_group1$fib,fib_group2$fib)
cor(fib_group1$fib,fib_group2$fib_sqrt)
cor(fib_group1)
cor(fib_groups_lable)
cor(fib_group1)
give.summary <- function(mydata){
name.column=vector(mode="character",ncol(mydata))
mean.column=vector(mode="integer",ncol(mydata))
length.column=vector(mode="integer",ncol(mydata))
min.column=vector(mode="integer",ncol(mydata))
max.column=vector(mode="integer",ncol(mydata))
var.column=vector(mode="integer",ncol(mydata))
for (i in 1:ncol(mydata)){
name.column[i]=names(mydata)[i]
mean.column[i]=mean(mydata[,i])
length.column=length(mydata[,i])
min.column=min(mydata[,i])
max.column=max(mydata[,i])
var.column=var(mydata[,i])
}
summaryinfo=as.table(rbind(mean.column,length.column,min.column,max.column,var.column))
colnames(summaryinfo)=name.column
rownames(summaryinfo)=c("Mean","Length","Min","Max","Variance")
summaryinfo
}
give.summary(fib_group1)
give.summary(fib_group2)
fib_group1$fib==fib_group1$fib_sqrt
plot(fib_group1$fib,log=y)
plot(fib_group1$fib,log="y")
lines(fib_group2$fib, col="red")
lines(fib_group1$fib_sqrt, col="blue")
plot(fib_group1$fib,log="y", col="black")
plot(fib_group1$fib,log="y", type = "l")
lines(fib_group2$fib, col="red")
lines(fib_group1$fib_sqrt, col="blue")
give.summary(fib_group1)
View(fib_group1)
i=2
mydata=fib_group1
name.column=vector(mode="character",ncol(mydata))
mean.column=vector(mode="integer",ncol(mydata))
min.column=vector(mode="integer",ncol(mydata))
length.column=vector(mode="integer",ncol(mydata))
max.column=vector(mode="integer",ncol(mydata))
var.column=vector(mode="integer",ncol(mydata))
name.column[i]=names(mydata)[i]
mean.column[i]=mean(mydata[,i])
length.column=length(mydata[,i])
min.column=min(mydata[,i])
max.column=max(mydata[,i])
max.column
i=1
name.column[i]=names(mydata)[i]
mean.column[i]=mean(mydata[,i])
min.column=min(mydata[,i])
length.column=length(mydata[,i])
max.column=max(mydata[,i])
max.column
name.column=vector(mode="character",ncol(mydata))
mean.column=vector(mode="integer",ncol(mydata))
length.column=vector(mode="integer",ncol(mydata))
min.column=vector(mode="integer",ncol(mydata))
max.column=vector(mode="integer",ncol(mydata))
var.column=vector(mode="integer",ncol(mydata))
give.summary <- function(mydata){
name.column=vector(mode="character",ncol(mydata))
mean.column=vector(mode="integer",ncol(mydata))
length.column=vector(mode="integer",ncol(mydata))
min.column=vector(mode="integer",ncol(mydata))
max.column=vector(mode="integer",ncol(mydata))
var.column=vector(mode="integer",ncol(mydata))
for (i in 1:ncol(mydata)){
name.column[i]=names(mydata)[i]
mean.column[i]=mean(mydata[,i])
length.column[i]=length(mydata[,i])
min.column[i]=min(mydata[,i])
max.column[i]=max(mydata[,i])
var.column[i]=var(mydata[,i])
}
summaryinfo=as.table(rbind(mean.column,length.column,min.column,max.column,var.column))
colnames(summaryinfo)=name.column
rownames(summaryinfo)=c("Mean","Length","Min","Max","Variance")
summaryinfo
}
give.summary(fib_group1)
give.summary(fib_group2)
plot(fib_group1$fib-fib_group1$fib_sqrt)
plot(fib_group1$fib-fib_group1$fib_sqrt, log = "y")
fib_group1$fib-fib_group1$fib_sqrt
plot(fib_group1$fib-fib_group2$fib_sqrt, log = "y")
cor(fib_group1$fib,fib_group2$fib_sqrt)
plot(fib_group1$fib, type = "l", col="red")
lines(fib_group1$fib_sqrt,col="red")
lines(fib_group1$fib_sqrt,col="red")
lines(fib_group2$fib_sqrt,col="blue")
lines(fib_group2$fib_sqrt,col="blue")
lines(fib_group2$fib,col="blue")
plot(fib_group1$fib, type = "l", col="red", xlab = "Step", ylab = "Fibonnaci value")
lines(fib_group1$fib_sqrt,col="red")
lines(fib_group2$fib,col="blue")
lines(fib_group2$fib_sqrt,col="blue")
?legend
legend("top", c("group 1", "group 2"), col=c("red","blue"))
legend("top",lwd=c(2.5,2.5), c("group 1", "group 2"), col=c("red","blue"))
plot(fib_group1$fib,xlim = c(80,100), type = "l", col="red", xlab = "Step", ylab = "Fibonnaci value")
lines(fib_group1$fib_sqrt,col="red")
lines(fib_group2$fib,col="blue")
lines(fib_group2$fib_sqrt,col="blue")
plot(fib_group1$fib,xlim = c(85,100), type = "l", col="red", xlab = "Step", ylab = "Fibonnaci value")
lines(fib_group1$fib_sqrt,col="red")
lines(fib_group2$fib,col="blue")
lines(fib_group2$fib_sqrt,col="blue")
legend("top",lwd=c(2.5,2.5), c("group 1", "group 2"), col=c("red","blue"))
plot(fib_group1)
plot(fib_group1, type = "l", col="red", xlab = "Step", ylab = "Fibonnaci value")
lines(fib_group2,col="blue")
lines(fib_group2$fib_sqrt,col="blue")
legend("top",lwd=c(2.5,2.5), c("group 1", "group 2"), col=c("red","blue"))
legend("topleft",lwd=c(2.5,2.5), c("group 1", "group 2"), col=c("red","blue"))
plot(fib_group1, type = "l", col="red", xlab = "Step", ylab = "Fibonnaci value")
lines(fib_group2,col="blue")
legend("topleft",lwd=c(2.5,2.5), c("group 1", "group 2"), col=c("red","blue"))
## R Test
# 1.a & b
fiblength=200
fib=vector(mode="integer",fiblength)
fib[2]=1
for (i in 3:fiblength){
fib[i]=fib[i-2]+fib[i-1]
}
# 2.a
fib_sqrt=round(sqrt(fib), digits = 2)
fib_together=as.data.frame(cbind(fib,fib_sqrt))
# 2.b
#Label them as Group 1 and Group 2 by creating a new variable Fib_groups_label
fib_groups=rep(c(0,1),fiblength/2)
fib_groups_label=paste("Group",fib_groups+1)
fib_together=cbind(fib_together,fib_groups)
Fib_2b = cbind(fib_together,fib_groups_label)
fib_group1=fib_together[fib_groups==0,c(1,2)]
fib_group2=fib_together[fib_groups==1,c(1,2)]
fib_groups_together=cbind(fib_group1,fib_group2)
# 3.a
give.summary <- function(mydata){
name.column=vector(mode="character",ncol(mydata))
mean.column=vector(mode="integer",ncol(mydata))
length.column=vector(mode="integer",ncol(mydata))
min.column=vector(mode="integer",ncol(mydata))
max.column=vector(mode="integer",ncol(mydata))
var.column=vector(mode="integer",ncol(mydata))
for (i in 1:ncol(mydata)){
name.column[i]=names(mydata)[i]
mean.column[i]=mean(mydata[,i])
length.column[i]=length(mydata[,i])
min.column[i]=min(mydata[,i])
max.column[i]=max(mydata[,i])
var.column[i]=var(mydata[,i])
}
summaryinfo=as.table(rbind(mean.column,length.column,min.column,max.column,var.column))
colnames(summaryinfo)=name.column
rownames(summaryinfo)=c("Mean","Length","Min","Max","Variance")
summaryinfo
}
give.summary(fib_group1)
give.summary(fib_group2)
# 3.b relationship between variables
# plotting with a logartimic y scale
plot(fib_group1$fib,log="y", type = "l")
lines(fib_group2$fib, col="red")
lines(fib_group1$fib_sqrt, col="blue")
# correlation, simple correlation table between the two columns in either table
cor(fib_group1)
cor(fib_group2)
#and across tables
cor(fib_group1$fib,fib_group2$fib_sqrt)
# 4.a & b Visualize
# plotting the fib and sqrt(fib) of both groups in one plot
plot(fib_group1, type = "l", col="red", xlab = "Step", ylab = "Fibonnaci value")
lines(fib_group2,col="blue")
legend("topleft",lwd=c(2.5,2.5), c("group 1", "group 2"), col=c("red","blue"))
# 5
write.csv(Fib_2b, "~/desktop/Fibonacci_test.csv")
Fib)2
Fib_2b
write.csv(Fib_2b, "D:/desktop/Fibonacci_test.csv")
write.csv(Fib_2b, "D:/Fibonacci_test.csv")
## R Test
# 1.a & b
fiblength=200
fib=vector(mode="integer",fiblength)
fib[2]=1
for (i in 3:fiblength){
fib[i]=fib[i-2]+fib[i-1]
}
# 2.a
fib_sqrt=round(sqrt(fib), digits = 2)
fib_together=as.data.frame(cbind(fib,fib_sqrt))
# 2.b
#Label them as Group 1 and Group 2 by creating a new variable Fib_groups_label
fib_groups=rep(c(0,1),fiblength/2)
fib_groups_label=paste("Group",fib_groups+1)
fib_together=cbind(fib_together,fib_groups)
fib_2b = cbind(fib_together,fib_groups_label)
fib_group1=fib_together[fib_groups==0,c(1,2)]
fib_group2=fib_together[fib_groups==1,c(1,2)]
fib_groups_together=cbind(fib_group1,fib_group2)
# 3.a
give.summary <- function(mydata){
name.column=vector(mode="character",ncol(mydata))
mean.column=vector(mode="integer",ncol(mydata))
length.column=vector(mode="integer",ncol(mydata))
min.column=vector(mode="integer",ncol(mydata))
max.column=vector(mode="integer",ncol(mydata))
var.column=vector(mode="integer",ncol(mydata))
for (i in 1:ncol(mydata)){
name.column[i]=names(mydata)[i]
mean.column[i]=mean(mydata[,i])
length.column[i]=length(mydata[,i])
min.column[i]=min(mydata[,i])
max.column[i]=max(mydata[,i])
var.column[i]=var(mydata[,i])
}
summaryinfo=as.table(rbind(mean.column,length.column,min.column,max.column,var.column))
colnames(summaryinfo)=name.column
rownames(summaryinfo)=c("Mean","Length","Min","Max","Variance")
summaryinfo
}
give.summary(fib_group1)
give.summary(fib_group2)
# 3.b relationship between variables
# plotting with a logartimic y scale
plot(fib_group1$fib,log="y", type = "l")
lines(fib_group2$fib, col="red")
lines(fib_group1$fib_sqrt, col="blue")
# correlation, simple correlation table between the two columns in either table
cor(fib_group1)
cor(fib_group2)
#and across tables
cor(fib_group1$fib,fib_group2$fib_sqrt)
# 4.a & b Visualize
# plotting the fib and sqrt(fib) of both groups in one plot
plot(fib_group1, type = "l", col="red", xlab = "Step", ylab = "Fibonnaci value")
lines(fib_group2,col="blue")
legend("topleft",lwd=c(2.5,2.5), c("group 1", "group 2"), col=c("red","blue"))
# 5
write.csv(fib_2b, "D:/Fibonacci_test.csv")
used.packages=c("xgboost","stringr","qlcMatrix","rBayesianOptimization","mailR","rJava")
59316106-18035064
24*13
library(rvest)
library(XML)
library(RCurl)
match_lineups=matrix(rep(0,25),nrow=1)
colnames(match_lineups)=c("match_date","hometeam","awayteam","h1","h2","h3","h4","h5","h6","h7","h8","h9","h10","h11","a1","a2","a3","a4","a5","a6","a7","a8","a9","a10","a11")
start_year=2018
weblink <- paste("https://www.11v11.com/competitions/premier-league/",start_year,"/matches/",sep = "")
raw_page <- read_html(weblink)
all_matches_link=raw_page %>% html_nodes(xpath='//div[@class="knockout-stage-list"]//a') %>% html_attr('href')
unique_matches_link=unique(all_matches_link)
unique_matches_link
raw.data.18 = read.csv("http://www.football-data.co.uk/mmz4281/1718/E0.csv")
nrow(raw.data.18)
con = dbConnect(RSQLite::SQLite(), dbname="historic_data/football.db")
library("RSQLite")
library(DBI)
con = dbConnect(RSQLite::SQLite(), dbname="historic_data/football.db")
library("RSQLite")
library(DBI)
setwd("D:/Het Project/Voetbal predictions/Premier-League")
con = dbConnect(RSQLite::SQLite(), dbname="historic_data/football.db")
last_game_in_db <- dbGetQuery(con,'SELECT
COUNT(*)
FROM
'2017'')
last_game_in_db <- dbGetQuery(con,'SELECT
COUNT(*)
FROM
2017')
last_game_in_db <- dbGetQuery(con,'SELECT
COUNT(*)
FROM
"2017"')
last_game_in_db
last_game_in_db+50
max(0,1)
max(1,last_game_in_db-10):last_game_available
max(1,last_game_in_db-10):last_game_available
last_game_in_db
last_game_in_db <- as.numeric(dbGetQuery(con,'SELECT
COUNT(*)
FROM
"2017"'))
last_game_in_db
max(1,last_game_in_db-10):last_game_available
last_game_available <- nrow(raw.data.18)
max(1,last_game_in_db-10):last_game_available
