form = get_form(playing_stat,num)
h=vector(mode="character",nrow(playing_stat))
a=vector(mode="character",nrow(playing_stat))
for (i in 1:(num*10)){
h[i] = 'M'  # since form is not available for n MW (n*10)
a[i] = 'M'
}
j = num+1
for (i in (num*10+1):nrow(playing_stat)){
ht = playing_stat$HomeTeam[i]
at = playing_stat$AwayTeam[i]
past = form[ht,j]               # get past n results
h[i]=past                   # 1 index is most recent
past = form[at,j]               # get past n results.
a[i]=past                  # 1 index is most recent
if ((i%% 10) == 0){
j = j + 1
}
}
playing_stat[paste('HM',num,sep = "")] = h
playing_stat[paste('AM',num,sep = "")] = a
return(playing_stat)
}
add_form_df=function(playing_statistics){
amount.games=nrow(playing_statistics)
if(amount.games>=2*10){playing_statistics = add_form(playing_statistics,1)}
if(amount.games>=3*10){playing_statistics = add_form(playing_statistics,2)}
if(amount.games>=4*10){playing_statistics = add_form(playing_statistics,3)}
if(amount.games>=5*10){playing_statistics = add_form(playing_statistics,4)}
if(amount.games>=6*10){playing_statistics = add_form(playing_statistics,5)}
return(playing_statistics)
}
# Make changes to df
playing_statistics_1 = add_form_df(playing_statistics_1)
playing_statistics_2 = add_form_df(playing_statistics_2)
playing_statistics_3 = add_form_df(playing_statistics_3)
playing_statistics_4 = add_form_df(playing_statistics_4)
playing_statistics_5 = add_form_df(playing_statistics_5)
playing_statistics_6 = add_form_df(playing_statistics_6)
playing_statistics_7 = add_form_df(playing_statistics_7)
playing_statistics_8 = add_form_df(playing_statistics_8)
playing_statistics_9 = add_form_df(playing_statistics_9)
playing_statistics_10 = add_form_df(playing_statistics_10)
playing_statistics_11 = add_form_df(playing_statistics_11)
playing_statistics_12 = add_form_df(playing_statistics_12)
playing_statistics_13 = add_form_df(playing_statistics_13)
playing_statistics_14 = add_form_df(playing_statistics_14)
playing_statistics_15 = add_form_df(playing_statistics_15)
playing_statistics_16 = add_form_df(playing_statistics_16)
playing_statistics_17 = add_form_df(playing_statistics_17)
playing_statistics_18 = add_form_df(playing_statistics_18)
View(playing_statistics_5)
playing_stat['HTWinStreak3'] = lapply(playing_stat['HM3'], FUN=get_3game_ws)
get_3game_ws=function(string){
if (string == 9){
return(1)
}else{
return(0)
}
}
get_5game_ws=function(string){
if (string == 15){
return(1)
}else{
return(0)
}
}
get_3game_ls=function(string){
if (string == 0){
return(1)
}else{
return(0)
}
}
get_5game_ls=function(string){
if (string == '0'){
return(1)
}else{
return(0)
}
}
playing_stat['HTWinStreak3'] = lapply(playing_stat['HM3'], FUN=get_3game_ws)
get_3game_ws=function(string){
for (i in 1:nrow(string)){
if (string == 9){
return(1)
}else{
return(0)
}
}
}
playing_stat['HTWinStreak3'] = lapply(playing_stat['HM3'], FUN=get_3game_ws)
playing_stat['HM3']
?lapply
c(5,4,5,6,7)
ab=c(5,4,5,6,7)
lapply(ab,FUN=x*2)
lapply(ab,FUN=ab*2)
lapply(ab,FUN=(ab*2))
hallo=function{}
hallo=function(hallo){
return(hallo*2)
}
lapply(ab,FUN=hallo)
get_3game_ws(playing_stat["HM3"])
get_3game_ws(as.vector(playing_stat["HM3"]))
playing_stat['HTWinStreak3'] = ifelse(playing_stat["HM3"],1,0)
playing_stat['HTWinStreak3'] = ifelse(playing_stat["HM3"]==9,1,0)
playing_stat_comb = rbind(playing_statistics_1,
playing_statistics_2,
playing_statistics_3,
playing_statistics_4,
playing_statistics_5,
playing_statistics_6,
playing_statistics_7,
playing_statistics_8,
playing_statistics_9,
playing_statistics_10,
playing_statistics_11,
playing_statistics_12,
playing_statistics_13,
playing_statistics_14,
playing_statistics_15,
playing_statistics_16,
playing_statistics_17)
playing_stat['HTWinStreak3'] = ifelse(playing_stat_comb["HM3"]==9,1,0)
playing_stat = rbind(playing_statistics_1,
playing_statistics_2,
playing_statistics_3,
playing_statistics_4,
playing_statistics_5,
playing_statistics_6,
playing_statistics_7,
playing_statistics_8,
playing_statistics_9,
playing_statistics_10,
playing_statistics_11,
playing_statistics_12,
playing_statistics_13,
playing_statistics_14,
playing_statistics_15,
playing_statistics_16,
playing_statistics_17)
playing_stat['HTWinStreak3'] = ifelse(playing_stat["HM3"]==9,1,0)
playing_stat['HTWinStreak3'] = ifelse(playing_stat["HM3"]==9,1,0)
playing_stat['HTWinStreak5'] = ifelse(playing_stat["HM5"]==15,1,0)
playing_stat['HTLossStreak3'] = ifelse(playing_stat["HM3"]==0,1,0)
playing_stat['HTLossStreak5'] = ifelse(playing_stat["HM5"]==0,1,0)
playing_stat['ATWinStreak3'] = ifelse(playing_stat["AM3"]==9,1,0)
playing_stat['ATWinStreak5'] = ifelse(playing_stat["AM5"]==15,1,0)
playing_stat['ATLossStreak3'] = ifelse(playing_stat["AM3"]==0,1,0)
playing_stat['ATLossStreak5'] = ifelse(playing_stat["AM5"]==0,1,0)
playing_stat['HTGD'] = playing_stat['HTGS'] - playing_stat['HTGC']
playing_stat['ATGD'] = playing_stat['ATGS'] - playing_stat['ATGC']
playing_stat['DiffPts'] = playing_stat['HTP'] - playing_stat['ATP']
playing_stat['DiffFormPts'] = playing_stat['HTFormPts'] - playing_stat['ATFormPts']
playing_stat['DiffFormPts'] = playing_stat['HM5'] - playing_stat['AM5']
"m>0"
"m">
0
m
"s"<0
"s">10
"s">1055
playing_stat['HM5'] - playing_stat['AM5']
rowMax(playing_stat['HM5'],playing_stat['HM4'],playing_stat['HM3'],playing_stat['HM2'],playing_stat['HM1'])
used.packages=c("xgboost","stringr","qlcMatrix")
not.installed=!(used.packages %in% rownames(installed.packages()))
if(length(used.packages[not.installed])>0){
install.packages(used.packages[not.installed])
}
library("qlcMatrix")
rowMax(playing_stat['HM5'],playing_stat['HM4'],playing_stat['HM3'],playing_stat['HM2'],playing_stat['HM1'])
is.numeric(qlcMatrix)
is.numeric(playing_stat['HM5'])
lapply(is.numeric(playing_stat['HM5']))
lapply(playing_stat['HM5'],is.numeric
)
playing_stat['HM5']
add_form=function(playing_stat,num){
form = get_form(playing_stat,num)
h=vector(mode="character",nrow(playing_stat))
a=vector(mode="character",nrow(playing_stat))
for (i in 1:(num*10)){
h[i] = 0  # since form is not available for n MW (n*10)
a[i] = 0
}
j = num+1
for (i in (num*10+1):nrow(playing_stat)){
ht = playing_stat$HomeTeam[i]
at = playing_stat$AwayTeam[i]
past = form[ht,j]               # get past n results
h[i]=past                   # 1 index is most recent
past = form[at,j]               # get past n results.
a[i]=past                  # 1 index is most recent
if ((i%% 10) == 0){
j = j + 1
}
}
playing_stat[paste('HM',num,sep = "")] = h
playing_stat[paste('AM',num,sep = "")] = a
return(playing_stat)
}
add_form_df=function(playing_statistics){
amount.games=nrow(playing_statistics)
if(amount.games>=2*10){playing_statistics = add_form(playing_statistics,1)}
if(amount.games>=3*10){playing_statistics = add_form(playing_statistics,2)}
if(amount.games>=4*10){playing_statistics = add_form(playing_statistics,3)}
if(amount.games>=5*10){playing_statistics = add_form(playing_statistics,4)}
if(amount.games>=6*10){playing_statistics = add_form(playing_statistics,5)}
return(playing_statistics)
}
playing_statistics_1 = add_form_df(playing_statistics_1)
playing_statistics_2 = add_form_df(playing_statistics_2)
playing_statistics_3 = add_form_df(playing_statistics_3)
playing_statistics_4 = add_form_df(playing_statistics_4)
playing_statistics_5 = add_form_df(playing_statistics_5)
playing_statistics_6 = add_form_df(playing_statistics_6)
playing_statistics_7 = add_form_df(playing_statistics_7)
playing_statistics_8 = add_form_df(playing_statistics_8)
playing_statistics_9 = add_form_df(playing_statistics_9)
playing_statistics_10 = add_form_df(playing_statistics_10)
playing_statistics_11 = add_form_df(playing_statistics_11)
playing_statistics_12 = add_form_df(playing_statistics_12)
playing_statistics_13 = add_form_df(playing_statistics_13)
playing_statistics_14 = add_form_df(playing_statistics_14)
playing_statistics_15 = add_form_df(playing_statistics_15)
playing_statistics_16 = add_form_df(playing_statistics_16)
playing_statistics_17 = add_form_df(playing_statistics_17)
playing_statistics_18 = add_form_df(playing_statistics_18)
cols = c('Date', 'HomeTeam', 'AwayTeam', 'FTHG', 'FTAG', 'FTR', 'HTGS', 'ATGS', 'HTGC', 'ATGC', 'HTP', 'ATP', 'HM1', 'HM2', 'HM3',
'HM4', 'HM5', 'AM1', 'AM2', 'AM3', 'AM4', 'AM5')
playing_statistics_1 = playing_statistics_1[cols]
playing_statistics_2 = playing_statistics_2[cols]
playing_statistics_3 = playing_statistics_3[cols]
playing_statistics_4 = playing_statistics_4[cols]
playing_statistics_5 = playing_statistics_5[cols]
playing_statistics_6 = playing_statistics_6[cols]
playing_statistics_7 = playing_statistics_7[cols]
playing_statistics_8 = playing_statistics_8[cols]
playing_statistics_9 = playing_statistics_9[cols]
playing_statistics_10 = playing_statistics_10[cols]
playing_statistics_11 = playing_statistics_11[cols]
playing_statistics_12 = playing_statistics_12[cols]
playing_statistics_13 = playing_statistics_13[cols]
playing_statistics_14 = playing_statistics_14[cols]
playing_statistics_15 = playing_statistics_15[cols]
playing_statistics_16 = playing_statistics_16[cols]
playing_statistics_17 = playing_statistics_17[cols]
playing_statistics_18 = playing_statistics_18[cols]
Standings = read.csv("EPLStandings.csv", sep = ";")
Standings[,1]=str_replace_all(Standings[,1], fixed(" "), "")
rownames(Standings)=Standings[,1]
Standings=Standings[,-1]
Standings[is.na(Standings)]=18
get_last=function(playing_stat, Standings, year){
HomeTeamLP = rep(0,nrow(playing_stat))
AwayTeamLP = rep(0,nrow(playing_stat))
for (i in 1:nrow(playing_stat)){
ht = playing_stat$HomeTeam[i]
at = playing_stat$AwayTeam[i]
HomeTeamLP[i]=Standings[ht,year]
AwayTeamLP[i]=Standings[at,year]
}
playing_stat['HomeTeamLP'] = HomeTeamLP
playing_stat['AwayTeamLP'] = AwayTeamLP
return (playing_stat)
}
playing_statistics_1 = get_last(playing_statistics_1, Standings, "X2000")
playing_statistics_2 = get_last(playing_statistics_2, Standings, "X2001")
playing_statistics_3 = get_last(playing_statistics_3, Standings, "X2002")
playing_statistics_4 = get_last(playing_statistics_4, Standings, "X2003")
playing_statistics_5 = get_last(playing_statistics_5, Standings, "X2004")
playing_statistics_6 = get_last(playing_statistics_6, Standings, "X2005")
playing_statistics_7 = get_last(playing_statistics_7, Standings, "X2006")
playing_statistics_8 = get_last(playing_statistics_8, Standings, "X2007")
playing_statistics_9 = get_last(playing_statistics_9, Standings, "X2008")
playing_statistics_10 = get_last(playing_statistics_10, Standings, "X2009")
playing_statistics_11 = get_last(playing_statistics_11, Standings, "X2010")
playing_statistics_12 = get_last(playing_statistics_12, Standings, "X2011")
playing_statistics_13 = get_last(playing_statistics_13, Standings, "X2012")
playing_statistics_14 = get_last(playing_statistics_14, Standings, "X2013")
playing_statistics_15 = get_last(playing_statistics_15, Standings, "X2014")
playing_statistics_16 = get_last(playing_statistics_16, Standings, "X2015")
playing_statistics_17 = get_last(playing_statistics_17, Standings, "X2016")
playing_statistics_18 = get_last(playing_statistics_18, Standings, "X2017")
get_mw=function(playing_stat){
j = 1
MatchWeek = rep(0,nrow(playing_stat))
for (i in 1:nrow(playing_stat)){
MatchWeek[i]=j
if ((i %% 10) == 0){
j = j + 1
}
}
playing_stat['MW'] = MatchWeek
return(playing_stat)
}
playing_statistics_1 = get_mw(playing_statistics_1)
playing_statistics_2 = get_mw(playing_statistics_2)
playing_statistics_3 = get_mw(playing_statistics_3)
playing_statistics_4 = get_mw(playing_statistics_4)
playing_statistics_5 = get_mw(playing_statistics_5)
playing_statistics_6 = get_mw(playing_statistics_6)
playing_statistics_7 = get_mw(playing_statistics_7)
playing_statistics_8 = get_mw(playing_statistics_8)
playing_statistics_9 = get_mw(playing_statistics_9)
playing_statistics_10 = get_mw(playing_statistics_10)
playing_statistics_11 = get_mw(playing_statistics_11)
playing_statistics_12 = get_mw(playing_statistics_12)
playing_statistics_13 = get_mw(playing_statistics_13)
playing_statistics_14 = get_mw(playing_statistics_14)
playing_statistics_15 = get_mw(playing_statistics_15)
playing_statistics_16 = get_mw(playing_statistics_16)
playing_statistics_17 = get_mw(playing_statistics_17)
playing_statistics_18 = get_mw(playing_statistics_18)
playing_stat = rbind(playing_statistics_1,
playing_statistics_2,
playing_statistics_3,
playing_statistics_4,
playing_statistics_5,
playing_statistics_6,
playing_statistics_7,
playing_statistics_8,
playing_statistics_9,
playing_statistics_10,
playing_statistics_11,
playing_statistics_12,
playing_statistics_13,
playing_statistics_14,
playing_statistics_15,
playing_statistics_16,
playing_statistics_17)
get_3game_ws=function(string){
for (i in 1:nrow(string)){
if (string == 9){
return(1)
}else{
return(0)
}
}
}
get_5game_ws=function(string){
if (string == 15){
return(1)
}else{
return(0)
}
}
get_3game_ls=function(string){
if (string == 0){
return(1)
}else{
return(0)
}
}
get_5game_ls=function(string){
if (string == '0'){
return(1)
}else{
return(0)
}
}
playing_stat['HTWinStreak3'] = ifelse(playing_stat["HM3"]==9,1,0)
playing_stat['HTWinStreak5'] = ifelse(playing_stat["HM5"]==15,1,0)
playing_stat['HTLossStreak3'] = ifelse(playing_stat["HM3"]==0,1,0)
playing_stat['HTLossStreak5'] = ifelse(playing_stat["HM5"]==0,1,0)
playing_stat['ATWinStreak3'] = ifelse(playing_stat["AM3"]==9,1,0)
playing_stat['ATWinStreak5'] = ifelse(playing_stat["AM5"]==15,1,0)
playing_stat['ATLossStreak3'] = ifelse(playing_stat["AM3"]==0,1,0)
playing_stat['ATLossStreak5'] = ifelse(playing_stat["AM5"]==0,1,0)
playing_stat['HTGD'] = playing_stat['HTGS'] - playing_stat['HTGC']
playing_stat['ATGD'] = playing_stat['ATGS'] - playing_stat['ATGC']
playing_stat['DiffPts'] = playing_stat['HTP'] - playing_stat['ATP']
rowMax(playing_stat['HM5'],playing_stat['HM4'],playing_stat['HM3'],playing_stat['HM2'],playing_stat['HM1'])
playing_stat['HM2']
rowMax(cbind(playing_stat['HM5'],playing_stat['HM4'],playing_stat['HM3'],playing_stat['HM2'],playing_stat['HM1']))
rowMax(as.data.fram(cbind(playing_stat['HM5'],playing_stat['HM4'],playing_stat['HM3'],playing_stat['HM2'],playing_stat['HM1'])))
rowMax(as.data.frame(cbind(playing_stat['HM5'],playing_stat['HM4'],playing_stat['HM3'],playing_stat['HM2'],playing_stat['HM1'])))
apply(cbind(playing_stat['HM5'],playing_stat['HM4'],playing_stat['HM3'],playing_stat['HM2'],playing_stat['HM1']),max)
apply(cbind(playing_stat['HM5'],playing_stat['HM4'],playing_stat['HM3'],playing_stat['HM2'],playing_stat['HM1']),max())
apply(cbind(playing_stat['HM5'],playing_stat['HM4'],playing_stat['HM3'],playing_stat['HM2'],playing_stat['HM1']),1,max())
apply(cbind(playing_stat['HM5'],playing_stat['HM4'],playing_stat['HM3'],playing_stat['HM2'],playing_stat['HM1']),1,max
)
diff_form=function(playing_stat){
HM5max=apply(cbind(playing_stat['HM5'],playing_stat['HM4'],playing_stat['HM3'],playing_stat['HM2'],playing_stat['HM1']),1,max)
AM5max=apply(cbind(playing_stat['AM5'],playing_stat['AM4'],playing_stat['AM3'],playing_stat['AM2'],playing_stat['AM1']),1,max)
return(HM5max-AM5max)
}
playing_stat['DiffFormPts'] = diff_form(playing_stat)
diff_form=function(playing_stat){
HM5max=apply(cbind(playing_stat['HM5'],playing_stat['HM4'],playing_stat['HM3'],playing_stat['HM2'],playing_stat['HM1']),1,max)
AM5max=apply(cbind(playing_stat['AM5'],playing_stat['AM4'],playing_stat['AM3'],playing_stat['AM2'],playing_stat['AM1']),1,max)
return(HM5max-AM5max)
}
playing_stat['DiffFormPts'] = diff_form(playing_stat)
apply(cbind(playing_stat['HM5'],playing_stat['HM4'],playing_stat['HM3'],playing_stat['HM2'],playing_stat['HM1']),1,max)
length(HM5max)
HM5max=apply(cbind(playing_stat['HM5'],playing_stat['HM4'],playing_stat['HM3'],playing_stat['HM2'],playing_stat['HM1']),1,max)
HM5max=apply(cbind(playing_stat['HM5'],playing_stat['HM4'],playing_stat['HM3'],playing_stat['HM2'],playing_stat['HM1']),1,max)
length(HM5max)
length(AM5max)
AM5max=apply(cbind(playing_stat['AM5'],playing_stat['AM4'],playing_stat['AM3'],playing_stat['AM2'],playing_stat['AM1']),1,max)
length(AM5max)
HM5max-AM5max
typeof(HM5max)
HM5max
as.numeric(HM5max)
diff_form=function(playing_stat){
HM5max=apply(cbind(playing_stat['HM5'],playing_stat['HM4'],playing_stat['HM3'],playing_stat['HM2'],playing_stat['HM1']),1,max)
AM5max=apply(cbind(playing_stat['AM5'],playing_stat['AM4'],playing_stat['AM3'],playing_stat['AM2'],playing_stat['AM1']),1,max)
HM5max=as.numeric(HM5max)
AM5max=as.numeric(AM5max)
return(HM5max-AM5max)
}
playing_stat['DiffFormPts'] = diff_form(playing_stat)
playing_stat['DiffLP'] = playing_stat['HomeTeamLP'] - playing_stat['AwayTeamLP']
cols = c('HTGD','ATGD','DiffPts','DiffFormPts','HTP','ATP')
for (col in cols){
playing_stat[col] = playing_stat[col] / playing_stat$MW
}
write.csv(playing_stat,"final_dataset.csv")
df=read.csv("final_dataset.csv")
spec = c(train = .6, test = .2, validate = .2)
g = sample(cut(
seq(nrow(df)),
nrow(df)*cumsum(c(0,spec)),
labels = names(spec)
))
res = split(df, g)
res
apply(res, nrow)/nrow(df)
apply(res, FUN=nrow)/nrow(df)
nrow(res)
nrow(res[1])
nrow(res[[1]])
X_train=res$train[,-"FTR"]
X_train=res$train[,-c("FTR")]
X_train=res$train[,c("FTR")]
X_train=res$train[,-which(names(res$train)=="FTR")]
X_test=res$test[,-which(names(res$test)=="FTR")]
X_valid=res$validate[,-which(names(res$validate)=="FTR")]
y_train=res$train[,"FTR"]
y_test=res$test[,"FTR"]
y_validate=res$validate[,"FTR"]
x_all=df[,-which(names(res$train)=="FTR")]
y_all=df[,"FTR"]
spec = c(train = .6, test = .2, validate = .2)
g = sample(cut(
seq(nrow(df)),
nrow(df)*cumsum(c(0,spec)),
labels = names(spec)
))
xres = split(x_all, g)
yres = split(y_all, g)
?xgboost
bstSparse <- xgboost(data = xres$train, label = yres$train, max.depth = 2, eta = 1, nthread = 2, nround = 2, objective = "binary:logistic")
View(df)
View(df)
names(df)
df=df[names(df)[-c(1:4)]]
x_all=df[,-which(names(res$train)=="FTR")]
y_all=df[,"FTR"]
spec = c(train = .6, test = .2, validate = .2)
g = sample(cut(
seq(nrow(df)),
nrow(df)*cumsum(c(0,spec)),
labels = names(spec)
))
xres = split(x_all, g)
yres = split(y_all, g)
for(t in unique(binom$type)) {
+   binom[paste("type",t,sep="")] <- ifelse(binom$type==t,1,0)
+ }
bstSparse <- xgboost(data = xres$train, label = yres$train, max.depth = 2, eta = 1, nthread = 2, nround = 2, objective = "binary:logistic")
res$train
df=read.csv("final_dataset.csv")
df=df[names(df)[-c(1:4)]]
df
x_all=df[,-which(names(res$train)=="FTR")]
y_all=df[,"FTR"]
spec = c(train = .6, test = .2, validate = .2)
g = sample(cut(
seq(nrow(df)),
nrow(df)*cumsum(c(0,spec)),
labels = names(spec)
))
xres = split(x_all, g)
yres = split(y_all, g)
for(t in unique(binom$type)) {
+   binom[paste("type",t,sep="")] <- ifelse(binom$type==t,1,0)
+ }
bstSparse <- xgboost(data = xres$train, label = yres$train, max.depth = 2, eta = 1, nthread = 2, nround = 2, objective = "binary:logistic")
xres$train
x_all
x_all=df[,-which(names(df)=="FTR")]
y_all=df[,"FTR"]
spec = c(train = .6, test = .2, validate = .2)
g = sample(cut(
seq(nrow(df)),
nrow(df)*cumsum(c(0,spec)),
labels = names(spec)
))
xres = split(x_all, g)
yres = split(y_all, g)
for(t in unique(binom$type)) {
+   binom[paste("type",t,sep="")] <- ifelse(binom$type==t,1,0)
+ }
bstSparse <- xgboost(data = xres$train, label = yres$train, max.depth = 2, eta = 1, nthread = 2, nround = 2, objective = "binary:logistic")
xres$train
xres$train
yres$train
