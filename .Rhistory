COUNT(*)
FROM
ENG_match_hist
WHERE
season =',season)))
last_game_in_db <- as.numeric(dbGetQuery(con, paste('SELECT
COUNT(*)
FROM
ENG_matches_hist
WHERE
season =',season)))
last_game_in_db
season_short = paste0(substr(season,3,4),substr(season,7,8))
raw.data.current = read.csv(paste0("http://www.football-data.co.uk/mmz4281/",season_short,"/E0.csv"))
clean.date = strptime(as.character(raw.data.current$Date), "%d/%m/%Y")
raw.data.current$Date = format(clean.date, "%Y-%m-%d")
raw.data.current = raw.data.current[order(raw.data.current$Date,raw.data.current$HomeTeam),]
raw.data.current$Date <- as.character(raw.data.current$Date)
raw.data.current$Date
last_game_available <- nrow(raw.data.current)
last_game_available
last_game_in_db < last_game_available
new_games_for_db <- cbind(((last_game_in_db+1):last_game_available),raw.data.current[((last_game_in_db+1):last_game_available),])
new_games_for_db
raw.data.current$season = season
raw.data.current = raw.data.current[order(raw.data.current$Date,raw.data.current$HomeTeam),]
raw.data.current$Date <- as.character(raw.data.current$Date)
last_game_available
raw.data.current
new_games_for_db <- cbind(((last_game_in_db+1):last_game_available),raw.data.current[((last_game_in_db+1):last_game_available),])
new_games_for_db
add_matches=dbSendQuery(con, 'INSERT INTO temp_season
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,?)')
dbDisconnect(con)
con = dbConnect(RSQLite::SQLite(), dbname="historic_data/football.db")
last_game_in_db <- as.numeric(dbGetQuery(con, paste('SELECT
COUNT(*)
FROM
ENG_matches_hist
WHERE
season =',season)))
last_game_in_db
season_short = paste0(substr(season,3,4),substr(season,7,8))
raw.data.current = read.csv(paste0("http://www.football-data.co.uk/mmz4281/",season_short,"/E0.csv"))
clean.date = strptime(as.character(raw.data.current$Date), "%d/%m/%Y")
raw.data.current$Date = format(clean.date, "%Y-%m-%d")
raw.data.current$season = season
raw.data.current = raw.data.current[order(raw.data.current$Date,raw.data.current$HomeTeam),]
raw.data.current$Date <- as.character(raw.data.current$Date)
last_game_available <- nrow(raw.data.current)
last_game_in_db
last_game_available
new_games_for_db <- cbind(((last_game_in_db+1):last_game_available),raw.data.current[((last_game_in_db+1):last_game_available),])
add_matches=dbSendQuery(con, 'INSERT INTO temp_season
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,?)')
for (i in 1:nrow(new_games_for_db)){
dbBind(add_matches, unname(new_games_for_db[i,]))
}
dbClearResult(add_matches)
count_matches_hist <- as.numeric(dbGetQuery(con,'SELECT
COUNT(*)
FROM
ENG_matches_hist'))
count_lineup_hist <- as.numeric(dbGetQuery(con,'SELECT
COUNT(*)
FROM
ENG_match_lineup'))
dbDisconnect(con)
count_matches_hist
count_lineup_hist
ENG_preparation(n_teams,FALSE)
dataf=read.csv("ENG_final_dataset.csv")
View(dataf)
include_odds= FALSE
all_data = import_data_db(include_odds)[[1]]
exp_data = import_data_db(include_odds)[[2]]
raw.data.7 = all_data[which(all_data$season== 20062007),]
raw.data.8 = all_data[which(all_data$season== 20072008),]
raw.data.9 = all_data[which(all_data$season== 20082009),]
raw.data.10 = all_data[which(all_data$season== 20092010),]
raw.data.11 = all_data[which(all_data$season== 20102011),]
raw.data.12 = all_data[which(all_data$season== 20112012),]
raw.data.13 = all_data[which(all_data$season== 20122013),]
raw.data.15 = all_data[which(all_data$season== 20142015),]
raw.data.14 = all_data[which(all_data$season== 20132014),]
raw.data.17 = all_data[which(all_data$season== 20162017),]
raw.data.16 = all_data[which(all_data$season== 20152016),]
raw.data.18 = all_data[which(all_data$season== 20172018),]
raw.data.19 = all_data[which(all_data$season== 20182019),]
n.games=nrow(raw.data.19)
n.teams=n_teams
next.matches=exp_data
for (i in 1:nrow(next.matches)){
if (next.matches$home_start_mv[i] == 11000) {
last_mv = all_data$home_start_mv[tail(which(all_data$HomeTeam==next.matches$hometeam[i] & all_data$home_start_mv!=11000),1)]
if (length(last_mv)!=0){
next.matches$home_start_mv[i]=last_mv
}
}
}
fixtures=as.data.frame(matrix(rep(0,ncol(raw.data.19)*nrow(exp_data)),nrow=nrow(exp_data)))
names(fixtures)=names(raw.data.19)
fixtures[,intersect(names(fixtures), names(next.matches))] <- next.matches[,intersect(names(fixtures), names(next.matches))]
fixtures$mid=c((max(all_data$mid)+1):(max(all_data$mid)+nrow(fixtures)))
fixtures$Date=next.matches$match_date
fixtures$Div=rep("E0",nrow(fixtures))
fixtures$HomeTeam=next.matches$hometeam
fixtures$AwayTeam=next.matches$awayteam
fixtures$HTR=rep("D",nrow(fixtures))
fixtures$FTR=rep("D",nrow(fixtures))
fixtures$Referee=rep("D",nrow(fixtures))
raw.data.19=rbind(raw.data.19,fixtures)
delete.spaces=function(rawdata){
rawdata$HomeTeam=str_replace_all(rawdata$HomeTeam, fixed(" "), "")
rawdata$AwayTeam=str_replace_all(rawdata$AwayTeam, fixed(" "), "")
return(rawdata)
}
raw.data.7=delete.spaces(raw.data.7)
raw.data.8=delete.spaces(raw.data.8)
raw.data.9=delete.spaces(raw.data.9)
raw.data.10=delete.spaces(raw.data.10)
raw.data.11=delete.spaces(raw.data.11)
raw.data.12=delete.spaces(raw.data.12)
raw.data.13=delete.spaces(raw.data.13)
raw.data.14=delete.spaces(raw.data.14)
raw.data.15=delete.spaces(raw.data.15)
raw.data.16=delete.spaces(raw.data.16)
raw.data.17=delete.spaces(raw.data.17)
raw.data.18=delete.spaces(raw.data.18)
raw.data.19=delete.spaces(raw.data.19)
if (include_odds){
## to include the odds of InterWetten
columns_req = c('Date','HomeTeam','AwayTeam','FTHG','FTAG','FTR','HS','AS','HST','AST','home_start_mv','away_start_mv','IWH','IWD','IWA')
}else{
# columns connected to gameplay and clean data from NA's
columns_req = c('Date','HomeTeam','AwayTeam','FTHG','FTAG','FTR','HS','AS','HST','AST','home_start_mv','away_start_mv')
}
playing_statistics_7 = raw.data.7[!is.na(raw.data.7$Date),columns_req]
playing_statistics_8 = raw.data.8[!is.na(raw.data.8$Date),columns_req]
playing_statistics_9 = raw.data.9[!is.na(raw.data.9$Date),columns_req]
playing_statistics_10 = raw.data.10[!is.na(raw.data.10$Date),columns_req]
playing_statistics_11 = raw.data.11[!is.na(raw.data.11$Date),columns_req]
playing_statistics_12 = raw.data.12[!is.na(raw.data.12$Date),columns_req]
playing_statistics_13 = raw.data.13[!is.na(raw.data.13$Date),columns_req]
playing_statistics_15 = raw.data.15[!is.na(raw.data.15$Date),columns_req]
playing_statistics_14 = raw.data.14[!is.na(raw.data.14$Date),columns_req]
playing_statistics_16 = raw.data.16[!is.na(raw.data.16$Date),columns_req]
playing_statistics_17 = raw.data.17[!is.na(raw.data.17$Date),columns_req]
playing_statistics_18 = raw.data.18[!is.na(raw.data.18$Date),columns_req]
playing_statistics_19 = raw.data.19[!is.na(raw.data.19$Date),columns_req]
get_goals_scored=function(playing_stat){
# Create a dictionary with team names as keys
goalsscored = matrix(rep(0,2*(n.teams*(n.teams-1))),ncol=2*(n.teams-1))
teamnames=unique(playing_stat$HomeTeam)
# count goals at Home and Away and create cumulative total per matchweek
for (t in teamnames){
HTGS=matrix(rep(0,2*(n.teams-1)),ncol = 2)
ATGS=matrix(rep(0,2*(n.teams-1)),ncol = 2)
for (i in 1:sum(playing_stat$HomeTeam==t)){
HTGS[i,]=t(c(playing_stat[which(playing_stat$HomeTeam==t)[i],c("FTHG")],playing_stat[which(playing_stat$HomeTeam==t)[i],c("Date")]))
}
for (i in 1:sum(playing_stat$AwayTeam==t)){
ATGS[i,]=t(c(playing_stat[which(playing_stat$AwayTeam==t)[i],c("FTAG")],playing_stat[which(playing_stat$AwayTeam==t)[i],c("Date")]))
}
TGS=rbind(HTGS,ATGS,c(0,0))
TGS=TGS[order(TGS[,2]),]
TGS=TGS[-nrow(TGS),]
fill.up.length=matrix(rep(0,2*length(which(TGS[,2]==0)[-tail(which(TGS[,2]==0),1)])),ncol = 2)
if (length(fill.up.length)>0){
TGS=TGS[-which(TGS[,2]==0)[-tail(which(TGS[,2]==0),1)],]
TGS=rbind(TGS,fill.up.length)
}
TGS[,1]=cumsum(TGS[,1])
assign(t,TGS[,1])
goalsscored[which(t==teamnames),]=t(TGS[,1])
}
rownames(goalsscored)=teamnames
return(goalsscored)
}
get_goals_conceded=function(playing_stat){
# Create a dictionary with team names as keys
goalsconceded = matrix(rep(0,2*(n.teams*(n.teams-1))),ncol=2*(n.teams-1))
teamnames=unique(playing_stat$HomeTeam)
# count goals at Home and Away and create cumulative total per matchweek
for (t in teamnames){
HTGC=matrix(rep(0,2*(n.teams-1)),ncol = 2)
ATGC=matrix(rep(0,2*(n.teams-1)),ncol = 2)
for (i in 1:sum(playing_stat$HomeTeam==t)){
HTGC[i,]=t(c(playing_stat[which(playing_stat$HomeTeam==t)[i],c("FTAG")],as.numeric(as.Date(playing_stat[which(playing_stat$HomeTeam==t)[i],c("Date")]))))
}
for (i in 1:sum(playing_stat$AwayTeam==t)){
ATGC[i,]=t(c(playing_stat[which(playing_stat$AwayTeam==t)[i],c("FTHG")],as.numeric(as.Date(playing_stat[which(playing_stat$AwayTeam==t)[i],c("Date")]))))
}
TGC=rbind(HTGC,ATGC,c(0,0))
TGC=TGC[order(TGC[,2]),]
TGC=TGC[-nrow(TGC),]
fill.up.length=matrix(rep(0,2*length(which(TGC[,2]==0)[-tail(which(TGC[,2]==0),1)])),ncol = 2)
if(length(fill.up.length)>0){
TGC=TGC[-which(TGC[,2]==0)[-tail(which(TGC[,2]==0),1)],]
TGC=rbind(TGC,fill.up.length)
}
TGC[,1]=cumsum(TGC[,1])
assign(t,TGC[,1])
goalsconceded[which(t==teamnames),]=t(TGC[,1])
}
rownames(goalsconceded)=teamnames
return(goalsconceded)
}
get_gss=function(playing_stat){
GC = get_goals_conceded(playing_stat)
GS = get_goals_scored(playing_stat)
j = 1
HTGS = rep(0,nrow(playing_stat))
ATGS = rep(0,nrow(playing_stat))
HTGC = rep(0,nrow(playing_stat))
ATGC = rep(0,nrow(playing_stat))
for (i in 1:nrow(playing_stat)){
ht = playing_stat$HomeTeam[i]
at = playing_stat$AwayTeam[i]
HTGS[i]=GS[ht,j]
ATGS[i]=GS[at,j]
HTGC[i]=GC[ht,j]
ATGC[i]=GC[at,j]
if ((i %% (n.teams/2)) == 0){
j = j + 1
}
playing_stat['HTGS'] = HTGS
playing_stat['ATGS'] = ATGS
playing_stat['HTGC'] = HTGC
playing_stat['ATGC'] = ATGC
}
return(playing_stat)
}
playing_statistics_7 = get_gss(playing_statistics_7)
playing_statistics_8 = get_gss(playing_statistics_8)
playing_statistics_9 = get_gss(playing_statistics_9)
playing_statistics_10 = get_gss(playing_statistics_10)
playing_statistics_11 = get_gss(playing_statistics_11)
playing_statistics_12 = get_gss(playing_statistics_12)
playing_statistics_13 = get_gss(playing_statistics_13)
playing_statistics_14 = get_gss(playing_statistics_14)
playing_statistics_15 = get_gss(playing_statistics_15)
playing_statistics_16 = get_gss(playing_statistics_16)
playing_statistics_17 = get_gss(playing_statistics_17)
playing_statistics_18 = get_gss(playing_statistics_18)
playing_statistics_19 = get_gss(playing_statistics_19)
get_shots=function(playing_stat){
# Create a dictionary with team names as keys
shots = matrix(rep(0,2*n.teams*(n.teams-1)),ncol=2*(n.teams-1))
teamnames=unique(playing_stat$HomeTeam)
# count goals at Home and Away and create cumulative total per matchweek
for (t in teamnames){
HTS=matrix(rep(0,2*(n.teams-1)),ncol = 2)
ATS=matrix(rep(0,2*(n.teams-1)),ncol = 2)
for (i in 1:sum(playing_stat$HomeTeam==t)){
HTS[i,]=t(c(playing_stat[which(playing_stat$HomeTeam==t)[i],"HS"],playing_stat[which(playing_stat$HomeTeam==t)[i],c("Date")]))
}
for (i in 1:sum(playing_stat$AwayTeam==t)){
ATS[i,]=t(c(playing_stat[which(playing_stat$AwayTeam==t)[i],c("AS")],playing_stat[which(playing_stat$AwayTeam==t)[i],c("Date")]))
}
TS=rbind(HTS,ATS,c(0,0))
TS=TS[order(TS[,2]),]
TS=TS[-nrow(TS),]
fill.up.length=matrix(rep(0,2*length(which(TS[,2]==0)[-tail(which(TS[,2]==0),1)])),ncol = 2)
if (length(fill.up.length)>0){
TS=TS[-which(TS[,2]==0)[-tail(which(TS[,2]==0),1)],]
TS=rbind(TS,fill.up.length)
}
TS[,1]=cumsum(TS[,1])
assign(t,TS[,1])
shots[which(t==teamnames),]=t(TS[,1])
}
rownames(shots)=teamnames
return(shots)
}
get_shots_on_target=function(playing_stat){
# Create a dictionary with team names as keys
shots_on_target = matrix(rep(0,2*n.teams*(n.teams-1)),ncol=2*(n.teams-1))
teamnames=unique(playing_stat$HomeTeam)
# count goals at Home and Away and create cumulative total per matchweek
for (t in teamnames){
HTST=matrix(rep(0,2*(n.teams-1)),ncol = 2)
ATST=matrix(rep(0,2*(n.teams-1)),ncol = 2)
for (i in 1:sum(playing_stat$HomeTeam==t)){
HTST[i,]=t(c(playing_stat[which(playing_stat$HomeTeam==t)[i],c("HST")],as.numeric(as.Date(playing_stat[which(playing_stat$HomeTeam==t)[i],c("Date")]))))
}
for (i in 1:sum(playing_stat$AwayTeam==t)){
ATST[i,]=t(c(playing_stat[which(playing_stat$AwayTeam==t)[i],c("AST")],as.numeric(as.Date(playing_stat[which(playing_stat$AwayTeam==t)[i],c("Date")]))))
}
TST=rbind(HTST,ATST,c(0,0))
TST=TST[order(TST[,2]),]
TST=TST[-nrow(TST),]
fill.up.length=matrix(rep(0,2*length(which(TST[,2]==0)[-tail(which(TST[,2]==0),1)])),ncol = 2)
if(length(fill.up.length)>0){
TST=TST[-which(TST[,2]==0)[-tail(which(TST[,2]==0),1)],]
TST=rbind(TST,fill.up.length)
}
TST[,1]=cumsum(TST[,1])
assign(t,TST[,1])
shots_on_target[which(t==teamnames),]=t(TST[,1])
}
rownames(shots_on_target)=teamnames
return(shots_on_target)
}
get_sst=function(playing_stat){
shots = get_shots(playing_stat)
shotstarget = get_shots_on_target(playing_stat)
j = 1
HTS = rep(0,nrow(playing_stat))
ATS = rep(0,nrow(playing_stat))
HTST = rep(0,nrow(playing_stat))
ATST = rep(0,nrow(playing_stat))
for (i in 1:nrow(playing_stat)){
ht = playing_stat$HomeTeam[i]
at = playing_stat$AwayTeam[i]
HTS[i]=shots[ht,j]
ATS[i]=shots[at,j]
HTST[i]=shotstarget[ht,j]
ATST[i]=shotstarget[at,j]
if ((i %% (n.teams/2)) == 0){
j = j + 1
}
playing_stat['HTS'] = HTS
playing_stat['ATS'] = ATS
playing_stat['HTST'] = HTST
playing_stat['ATST'] = ATST
}
return(playing_stat)
}
playing_statistics_7 = get_sst(playing_statistics_7)
playing_statistics_8 = get_sst(playing_statistics_8)
playing_statistics_9 = get_sst(playing_statistics_9)
playing_statistics_10 = get_sst(playing_statistics_10)
playing_statistics_11 = get_sst(playing_statistics_11)
playing_statistics_12 = get_sst(playing_statistics_12)
playing_statistics_13 = get_sst(playing_statistics_13)
playing_statistics_14 = get_sst(playing_statistics_14)
playing_statistics_15 = get_sst(playing_statistics_15)
playing_statistics_16 = get_sst(playing_statistics_16)
playing_statistics_17 = get_sst(playing_statistics_17)
playing_statistics_18 = get_sst(playing_statistics_18)
playing_statistics_19 = get_sst(playing_statistics_19)
playing_statistics_19
playing_stat =playing_statistics_19
shots = get_shots(playing_stat)
shots = matrix(rep(0,2*n.teams*(n.teams-1)),ncol=2*(n.teams-1))
teamnames=unique(playing_stat$HomeTeam)
teamnames
for (t in teamnames){
HTS=matrix(rep(0,2*(n.teams-1)),ncol = 2)
ATS=matrix(rep(0,2*(n.teams-1)),ncol = 2)
for (i in 1:sum(playing_stat$HomeTeam==t)){
HTS[i,]=t(c(playing_stat[which(playing_stat$HomeTeam==t)[i],"HS"],playing_stat[which(playing_stat$HomeTeam==t)[i],c("Date")]))
}
for (i in 1:sum(playing_stat$AwayTeam==t)){
ATS[i,]=t(c(playing_stat[which(playing_stat$AwayTeam==t)[i],c("AS")],playing_stat[which(playing_stat$AwayTeam==t)[i],c("Date")]))
}
TS=rbind(HTS,ATS,c(0,0))
TS=TS[order(TS[,2]),]
TS=TS[-nrow(TS),]
fill.up.length=matrix(rep(0,2*length(which(TS[,2]==0)[-tail(which(TS[,2]==0),1)])),ncol = 2)
if (length(fill.up.length)>0){
TS=TS[-which(TS[,2]==0)[-tail(which(TS[,2]==0),1)],]
TS=rbind(TS,fill.up.length)
}
TS[,1]=cumsum(TS[,1])
assign(t,TS[,1])
shots[which(t==teamnames),]=t(TS[,1])
}
t='Wolves'
HTS=matrix(rep(0,2*(n.teams-1)),ncol = 2)
ATS=matrix(rep(0,2*(n.teams-1)),ncol = 2)
for (i in 1:sum(playing_stat$HomeTeam==t)){
HTS[i,]=t(c(playing_stat[which(playing_stat$HomeTeam==t)[i],"HS"],playing_stat[which(playing_stat$HomeTeam==t)[i],c("Date")]))
}
for (i in 1:sum(playing_stat$AwayTeam==t)){
ATS[i,]=t(c(playing_stat[which(playing_stat$AwayTeam==t)[i],c("AS")],playing_stat[which(playing_stat$AwayTeam==t)[i],c("Date")]))
}
TS=rbind(HTS,ATS,c(0,0))
TS=TS[order(TS[,2]),]
TS=TS[-nrow(TS),]
fill.up.length=matrix(rep(0,2*length(which(TS[,2]==0)[-tail(which(TS[,2]==0),1)])),ncol = 2)
if (length(fill.up.length)>0){
TS=TS[-which(TS[,2]==0)[-tail(which(TS[,2]==0),1)],]
TS=rbind(TS,fill.up.length)
}
TS
ATS
playing_stat$AS
View(all_data)
View(raw.data.current)
ENG_preparation(n_teams,FALSE)
dataf=read.csv("ENG_final_dataset.csv")
x_all = dataf[,-which(names(dataf)=='FTR')]
y_all = dataf['FTR']
cols = c('HTGD','ATGD','HTP','ATP','DiffLP','Distance','AwayAvgAge','HomeAvgAge','HomeAvgMV','AwayAvgMV','HTS','ATS','HTST','ATST','HM3','AM3','HM5','AM5','HM10','AM10','HMH1','AMA1')
x_all[cols] = scale(x_all[cols])
x_featured=x_all[,c('HTP', 'ATP','HTGD', 'ATGD',
"DiffPts",'HM3','AM3','HM5','AM5','HM10','AM10','HMH1','AMA1',
'DiffLP','Distance','AwayAvgAge','HomeAvgAge','HomeAvgMV','AwayAvgMV',
'home_start_mv','away_start_mv',
'HTS','ATS','HTST','ATST')]
df=cbind(x_featured,y_all)
df$FTRC=ifelse(df$FTR=="H",0,ifelse(df$FTR=="D",1,2))
dat=df[-which(names(df)=="FTR")]
set.seed(999)
fixtures.coming=c((nrow(dat)-(n_teams/2-1)):nrow(dat))
train_index <- dat[-fixtures.coming,]
data_variables <- as.matrix(dat[,-which(names(dat)=="FTRC")])
data_label <- dat[,"FTRC"]
data_matrix <- xgb.DMatrix(data = as.matrix(dat), label = data_label)
train_data   <- data_variables[-fixtures.coming,]
train_label  <- data_label[-fixtures.coming]
train_matrix <- xgb.DMatrix(data = train_data, label = train_label)
predict_data  <- data_variables[fixtures.coming,]
predict_label <- data_label[fixtures.coming]
predict_matrix <- xgb.DMatrix(data = predict_data, label = predict_label)
numberOfClasses <- length(unique(dat$FTRC))
xgb_params <- list("max_depth"=3,"eta"=0.2,
"colsample_bytree"=0.9,
"objective" = "multi:softprob",
"eval_metric" = "mlogloss",
"min_child_weight"=7,
"subsample"=0.8,
"alpha"=0,
"lambda"=1,
"num_class" = numberOfClasses)
nround    <- 20 # number of XGBoost rounds
cv.nfold  <- 10
bst_model <- xgb.train(params = xgb_params,
data = train_matrix,
nrounds = nround)
test_pred <- predict(bst_model, newdata = predict_matrix)
test_prediction <- matrix(test_pred, nrow = numberOfClasses,
ncol=length(test_pred)/numberOfClasses) %>%
t() %>%
data.frame() %>%
mutate(max_prob = max.col(., "last"))
test_prediction[,c("Date","HomeTeam","AwayTeam")]=x_all[fixtures.coming,c("Date","HomeTeam","AwayTeam")]
test_prediction$HomeTeam=as.character(test_prediction$HomeTeam)
test_prediction$AwayTeam=as.character(test_prediction$AwayTeam)
names(test_prediction)[c(1:3)]=c("Home","Draw","Away")
test_prediction$PredictedOutcome=ifelse(test_prediction$max_prob==1,test_prediction$HomeTeam,ifelse(test_prediction$max_prob==3,test_prediction$AwayTeam,"Draw"))
test_prediction$Homeodd=1/test_prediction$Home
test_prediction$Drawodd=1/test_prediction$Draw
test_prediction$Awayodd=1/test_prediction$Away
pinnacle_odds = give_pinnacle_odds()
pinnacle_odds = pinnacle_odds[1:(n_teams/2),]
pinnacle_odds = data.frame(pinnacle_odds)
pinnacle_odds$bookmaker_source = 'Pinnacle'
pinnacle_odds = data.frame(pinnacle_odds)
test_prediction = data.frame(test_prediction[,c("HomeTeam","AwayTeam","PredictedOutcome","Homeodd","Drawodd","Awayodd")])
real_and_predicted = merge(x = pinnacle_odds, y = test_prediction, by = c("HomeTeam","AwayTeam"), all.x = TRUE)
pred_real_oddratio = real_and_predicted[,c("P_H_odds","P_D_odds","P_A_odds")]/real_and_predicted[,c("Homeodd","Drawodd","Awayodd")]
best_ratio = apply(pred_real_oddratio,1,max)
best_ratio_outcome = max.col(pred_real_oddratio)
best_ratio_outcome = ifelse(best_ratio_outcome == 1, "H",ifelse(best_ratio_outcome == 2,"D","A"))
pinnacle_odds = give_pinnacle_odds()
pinnacle_odds = pinnacle_odds[1:(n_teams/2),]
pinnacle_odds = data.frame(pinnacle_odds)
# Adding our predicted odds
test_prediction = data.frame(test_prediction[,c("HomeTeam","AwayTeam","PredictedOutcome","Homeodd","Drawodd","Awayodd")])
real_and_predicted = merge(x = pinnacle_odds, y = test_prediction, by = c("HomeTeam","AwayTeam"), all.x = TRUE)
# See what the best deal is according to the ratio between BF odds and our odds
pred_real_oddratio = real_and_predicted[,c("P_H_odds","P_D_odds","P_A_odds")]/real_and_predicted[,c("Homeodd","Drawodd","Awayodd")]
best_ratio = apply(pred_real_oddratio,1,max)
best_ratio_outcome = max.col(pred_real_oddratio)
best_ratio_outcome = ifelse(best_ratio_outcome == 1, "H",ifelse(best_ratio_outcome == 2,"D","A"))
# Put all columns together
real_and_predicted = real_and_predicted[,c("Date","HomeTeam","AwayTeam","PredictedOutcome","Homeodd","Drawodd","Awayodd",
"P_H_odds","P_D_odds","P_A_odds")]
names(real_and_predicted) =c("MatchDate","HomeTeam","AwayTeam","PredictedOutcome","Homeodd","Drawodd","Awayodd",
"P_H_odds","P_D_odds","P_A_odds")
real_and_predicted = cbind(real_and_predicted,best_ratio,best_ratio_outcome)
real_and_predicted = real_and_predicted[order(real_and_predicted$MatchDate),]
# Inserting timestamp on when the prediction was made and add bookmaker of which we use the odds
real_and_predicted$timestamp = Sys.time()
pinnacle_odds$bookmaker_source = 'Pinnacle'
# select only correctly predicted games (no missing data)
new_predicted_games <- real_and_predicted[!is.na(real_and_predicted$best_ratio),]
new_predicted_games
write.csv(new_predicted_games,paste("predictions_per_MW/prediction_MW",(nrow(dataf) %% (n_teams*(n_teams-1)))/(n_teams/2),"_",as.Date(head(real_and_predicted$MatchDate,n=1)),".csv",sep = ""))
ENG_insert_predictions <- function(real_and_predicted){
library("RSQLite")
library("DBI")
# Open connectino to the db
con = dbConnect(RSQLite::SQLite(), dbname="historic_data/football.db")
# Delete content of input table (because we just use this table for input, a trigger adds it to the main table)
add_predictions =dbSendQuery(con, 'INSERT INTO ENG_match_prediction
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)')
for (i in 1:nrow(real_and_predicted)){
dbBind(add_predictions, unname(real_and_predicted[i,]))
}
dbClearResult(add_predictions)
dbDisconnect(con)
}
ENG_insert_predictions(new_predicted_games)
library("RSQLite")
library("DBI")
con = dbConnect(RSQLite::SQLite(), dbname="historic_data/football.db")
real_and_predicted$bookmaker_source = 'Pinnacle'
new_predicted_games <- real_and_predicted[!is.na(real_and_predicted$best_ratio),]
write.csv(new_predicted_games,paste("predictions_per_MW/prediction_MW",(nrow(dataf) %% (n_teams*(n_teams-1)))/(n_teams/2),"_",as.Date(head(real_and_predicted$MatchDate,n=1)),".csv",sep = ""))
ENG_insert_predictions(new_predicted_games)
if (!is.null(new_predicted_games$Drawodd[1])) {
print(paste("SUCCESFULLY PREDICTED", nrow(new_predicted_games),"GAMES"))
}
add_predictions =dbSendQuery(con, 'INSERT INTO ENG_match_prediction
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)')
for (i in 1:nrow(real_and_predicted)){
dbBind(add_predictions, unname(real_and_predicted[i,]))
}
