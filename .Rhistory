HTST = rep(0,nrow(playing_stat))
ATST = rep(0,nrow(playing_stat))
for (i in 1:nrow(playing_stat)){
ht = playing_stat$HomeTeam[i]
at = playing_stat$AwayTeam[i]
HTS[i]=shots[ht,j]
ATS[i]=shots[at,j]
HTST[i]=shotstarget[ht,j]
ATST[i]=shotstarget[at,j]
if ((i %% 10) == 0){
j = j + 1
}
playing_stat['HTS'] = HTS
playing_stat['ATS'] = ATS
playing_stat['HTST'] = HTST
playing_stat['ATST'] = ATST
}
return(playing_stat)
}
# Apply to each dataset
playing_statistics_1 = get_sst(playing_statistics_1)
playing_statistics_2 = get_sst(playing_statistics_2)
playing_statistics_3 = get_sst(playing_statistics_3)
playing_statistics_4 = get_sst(playing_statistics_4)
playing_statistics_5 = get_sst(playing_statistics_5)
playing_statistics_6 = get_sst(playing_statistics_6)
playing_statistics_7 = get_sst(playing_statistics_7)
playing_statistics_8 = get_sst(playing_statistics_8)
playing_statistics_9 = get_sst(playing_statistics_9)
playing_statistics_10 = get_sst(playing_statistics_10)
playing_statistics_11 = get_sst(playing_statistics_11)
playing_statistics_12 = get_sst(playing_statistics_12)
playing_statistics_13 = get_sst(playing_statistics_13)
playing_statistics_14 = get_sst(playing_statistics_14)
playing_statistics_15 = get_sst(playing_statistics_15)
playing_statistics_16 = get_sst(playing_statistics_16)
playing_statistics_17 = get_sst(playing_statistics_17)
playing_statistics_18 = get_sst(playing_statistics_18)
# get respective points
get_points_gained=function(playing_stat){
# Create a dictionary with team names as keys
pointsgained = matrix(rep(0,2*380),ncol=38)
teamnames=unique(playing_stat$HomeTeam)
HFTR.point=rep(0,nrow(playing_stat))
AFTR.point=rep(0,nrow(playing_stat))
for (i in 1:nrow(playing_stat)){
if(playing_stat$FTR[i]=="H"){
HFTR.point[i]=3
AFTR.point[i]=0
}else if(playing_stat$FTR[i]=="D"){
HFTR.point[i]=1
AFTR.point[i]=1
}else{
HFTR.point[i]=0
AFTR.point[i]=3
}
}
# count goals at Home and Away and create cumulative total per matchweek
for (t in teamnames){
HTP=matrix(rep(0,2*19),ncol = 2)
ATP=matrix(rep(0,2*19),ncol = 2)
for (i in 1:sum(playing_stat$HomeTeam==t)){
HTP[i,]=t(c(HFTR.point[which(playing_stat$HomeTeam==t)[i]],playing_stat[which(playing_stat$HomeTeam==t)[i],c("Date")]))
}
for (i in 1:sum(playing_stat$AwayTeam==t)){
ATP[i,]=t(c(AFTR.point[which(playing_stat$AwayTeam==t)[i]],playing_stat[which(playing_stat$AwayTeam==t)[i],c("Date")]))
}
TP=rbind(HTP,ATP,c(0,0))
TP=TP[order(TP[,2]),]
TP=TP[-nrow(TP),]
fill.up.length=matrix(rep(0,2*length(which(TP[,2]==0)[-tail(which(TP[,2]==0),1)])),ncol = 2)
if (length(fill.up.length)>0){
TP=TP[-which(TP[,2]==0)[-tail(which(TP[,2]==0),1)],]
TP=rbind(TP,fill.up.length)
}
TP[,1]=cumsum(TP[,1])
assign(t,TP[,1])
pointsgained[which(t==teamnames),]=t(TP[,1])
}
rownames(pointsgained)=teamnames
return(pointsgained)
}
get_agg_points=function(playing_stat){
PG = get_points_gained(playing_stat)
j = 1
HTP = rep(0,nrow(playing_stat))
ATP = rep(0,nrow(playing_stat))
for (i in 1:nrow(playing_stat)){
ht = playing_stat$HomeTeam[i]
at = playing_stat$AwayTeam[i]
HTP[i]=PG[ht,j]
ATP[i]=PG[at,j]
if ((i %% 10) == 0){
j = j + 1
}
playing_stat['HTP'] = HTP
playing_stat['ATP'] = ATP
}
return(playing_stat)
}
# Apply to each dataset
playing_statistics_1 = get_agg_points(playing_statistics_1)
playing_statistics_2 = get_agg_points(playing_statistics_2)
playing_statistics_3 = get_agg_points(playing_statistics_3)
playing_statistics_4 = get_agg_points(playing_statistics_4)
playing_statistics_5 = get_agg_points(playing_statistics_5)
playing_statistics_6 = get_agg_points(playing_statistics_6)
playing_statistics_7 = get_agg_points(playing_statistics_7)
playing_statistics_8 = get_agg_points(playing_statistics_8)
playing_statistics_9 = get_agg_points(playing_statistics_9)
playing_statistics_10 = get_agg_points(playing_statistics_10)
playing_statistics_11 = get_agg_points(playing_statistics_11)
playing_statistics_12 = get_agg_points(playing_statistics_12)
playing_statistics_13 = get_agg_points(playing_statistics_13)
playing_statistics_14 = get_agg_points(playing_statistics_14)
playing_statistics_15 = get_agg_points(playing_statistics_15)
playing_statistics_16 = get_agg_points(playing_statistics_16)
playing_statistics_17 = get_agg_points(playing_statistics_17)
playing_statistics_18 = get_agg_points(playing_statistics_18)
get_form=function(playing_stat,num){
form = get_points_gained(playing_stat)
form_final = form*0
for (i in (num+1):38){
# j = 1
# if(j < (num+1)){
form_final[,i] = form[,i]-form[,i-min(num,i+1)]
#   j =  j + 1
}
return(form_final)
}
add_form=function(playing_stat,num){
form = get_form(playing_stat,num)
h=vector(mode="character",nrow(playing_stat))
a=vector(mode="character",nrow(playing_stat))
for (i in 1:(num*10)){
h[i] = 0  # since form is not available for n MW (n*10)
a[i] = 0
}
j = num+1
for (i in (num*10+1):nrow(playing_stat)){
ht = playing_stat$HomeTeam[i]
at = playing_stat$AwayTeam[i]
past = form[ht,j]               # get past n results
h[i]=past                   # 1 index is most recent
past = form[at,j]               # get past n results.
a[i]=past                  # 1 index is most recent
if ((i%% 10) == 0){
j = j + 1
}
}
playing_stat[paste('HM',num,sep = "")] = h
playing_stat[paste('AM',num,sep = "")] = a
return(playing_stat)
}
add_form_df=function(playing_statistics){
amount.games=nrow(playing_statistics)
if(amount.games>=2*10){playing_statistics = add_form(playing_statistics,1)}
if(amount.games>=3*10){playing_statistics = add_form(playing_statistics,2)}
if(amount.games>=4*10){playing_statistics = add_form(playing_statistics,3)}
if(amount.games>=5*10){playing_statistics = add_form(playing_statistics,4)}
if(amount.games>=6*10){playing_statistics = add_form(playing_statistics,5)}
return(playing_statistics)
}
# Make changes to df
playing_statistics_1 = add_form_df(playing_statistics_1)
playing_statistics_2 = add_form_df(playing_statistics_2)
playing_statistics_3 = add_form_df(playing_statistics_3)
playing_statistics_4 = add_form_df(playing_statistics_4)
playing_statistics_5 = add_form_df(playing_statistics_5)
playing_statistics_6 = add_form_df(playing_statistics_6)
playing_statistics_7 = add_form_df(playing_statistics_7)
playing_statistics_8 = add_form_df(playing_statistics_8)
playing_statistics_9 = add_form_df(playing_statistics_9)
playing_statistics_10 = add_form_df(playing_statistics_10)
playing_statistics_11 = add_form_df(playing_statistics_11)
playing_statistics_12 = add_form_df(playing_statistics_12)
playing_statistics_13 = add_form_df(playing_statistics_13)
playing_statistics_14 = add_form_df(playing_statistics_14)
playing_statistics_15 = add_form_df(playing_statistics_15)
playing_statistics_16 = add_form_df(playing_statistics_16)
playing_statistics_17 = add_form_df(playing_statistics_17)
playing_statistics_18 = add_form_df(playing_statistics_18)
# Rearranging columns with InterWetten odds
# cols = c('Date', 'HomeTeam', 'AwayTeam', 'FTHG', 'FTAG', 'FTR', 'HTGS', 'ATGS', 'HTGC', 'ATGC', 'HTP', 'ATP','HTS','ATS','HTST','ATST', 'HM1', 'HM2', 'HM3',
#         'HM4', 'HM5', 'AM1', 'AM2', 'AM3', 'AM4', 'AM5','IWH', 'IWD', 'IWA')
# Rearranging columns
cols = c('Date', 'HomeTeam', 'AwayTeam', 'FTHG', 'FTAG', 'FTR', 'HTGS', 'ATGS', 'HTGC', 'ATGC', 'HTP', 'ATP','HTS','ATS','HTST','ATST', 'HM1', 'HM2', 'HM3',
'HM4', 'HM5', 'AM1', 'AM2', 'AM3', 'AM4', 'AM5')
playing_statistics_1 = playing_statistics_1[cols]
playing_statistics_2 = playing_statistics_2[cols]
playing_statistics_3 = playing_statistics_3[cols]
playing_statistics_4 = playing_statistics_4[cols]
playing_statistics_5 = playing_statistics_5[cols]
playing_statistics_6 = playing_statistics_6[cols]
playing_statistics_7 = playing_statistics_7[cols]
playing_statistics_8 = playing_statistics_8[cols]
playing_statistics_9 = playing_statistics_9[cols]
playing_statistics_10 = playing_statistics_10[cols]
playing_statistics_11 = playing_statistics_11[cols]
playing_statistics_12 = playing_statistics_12[cols]
playing_statistics_13 = playing_statistics_13[cols]
playing_statistics_14 = playing_statistics_14[cols]
playing_statistics_15 = playing_statistics_15[cols]
playing_statistics_16 = playing_statistics_16[cols]
playing_statistics_17 = playing_statistics_17[cols]
playing_statistics_18 = playing_statistics_18[cols]
#Get Last Year's Position as also an independent variable:
Standings = read.csv("EPLStandings.csv", sep = ";")
Standings[,1]=str_replace_all(Standings[,1], fixed(" "), "")
rownames(Standings)=Standings[,1]
Standings=Standings[,-1]
Standings[is.na(Standings)]=18
get_last=function(playing_stat, Standings, year){
HomeTeamLP = rep(0,nrow(playing_stat))
AwayTeamLP = rep(0,nrow(playing_stat))
for (i in 1:nrow(playing_stat)){
ht = playing_stat$HomeTeam[i]
at = playing_stat$AwayTeam[i]
HomeTeamLP[i]=Standings[ht,year]
AwayTeamLP[i]=Standings[at,year]
}
playing_stat['HomeTeamLP'] = HomeTeamLP
playing_stat['AwayTeamLP'] = AwayTeamLP
return (playing_stat)
}
playing_statistics_1 = get_last(playing_statistics_1, Standings, "X2000")
playing_statistics_2 = get_last(playing_statistics_2, Standings, "X2001")
playing_statistics_3 = get_last(playing_statistics_3, Standings, "X2002")
playing_statistics_4 = get_last(playing_statistics_4, Standings, "X2003")
playing_statistics_5 = get_last(playing_statistics_5, Standings, "X2004")
playing_statistics_6 = get_last(playing_statistics_6, Standings, "X2005")
playing_statistics_7 = get_last(playing_statistics_7, Standings, "X2006")
playing_statistics_8 = get_last(playing_statistics_8, Standings, "X2007")
playing_statistics_9 = get_last(playing_statistics_9, Standings, "X2008")
playing_statistics_10 = get_last(playing_statistics_10, Standings, "X2009")
playing_statistics_11 = get_last(playing_statistics_11, Standings, "X2010")
playing_statistics_12 = get_last(playing_statistics_12, Standings, "X2011")
playing_statistics_13 = get_last(playing_statistics_13, Standings, "X2012")
playing_statistics_14 = get_last(playing_statistics_14, Standings, "X2013")
playing_statistics_15 = get_last(playing_statistics_15, Standings, "X2014")
playing_statistics_16 = get_last(playing_statistics_16, Standings, "X2015")
playing_statistics_17 = get_last(playing_statistics_17, Standings, "X2016")
playing_statistics_18 = get_last(playing_statistics_18, Standings, "X2017")
#Get average age as also an independent variable:
AvgAge = read.csv("AvgAge.csv", sep = ",")
AvgAge[,1]=str_replace_all(AvgAge[,1], fixed(" "), "")
rownames(AvgAge)=AvgAge[,1]
AvgAge=AvgAge[,-1]
get_AvgAge=function(playing_stat, AvgAge, year){
HomeTeamAA = rep(0,nrow(playing_stat))
AwayTeamAA = rep(0,nrow(playing_stat))
for (i in 1:nrow(playing_stat)){
ht = playing_stat$HomeTeam[i]
at = playing_stat$AwayTeam[i]
HomeTeamAA[i]=AvgAge[ht,year]
AwayTeamAA[i]=AvgAge[at,year]
}
playing_stat['HomeAvgAge'] = HomeTeamAA
playing_stat['AwayAvgAge'] = AwayTeamAA
return (playing_stat)
}
playing_statistics_1 = get_AvgAge(playing_statistics_1, AvgAge, "X2000")
playing_statistics_2 = get_AvgAge(playing_statistics_2, AvgAge, "X2001")
playing_statistics_3 = get_AvgAge(playing_statistics_3, AvgAge, "X2002")
playing_statistics_4 = get_AvgAge(playing_statistics_4, AvgAge, "X2003")
playing_statistics_5 = get_AvgAge(playing_statistics_5, AvgAge, "X2004")
playing_statistics_6 = get_AvgAge(playing_statistics_6, AvgAge, "X2005")
playing_statistics_7 = get_AvgAge(playing_statistics_7, AvgAge, "X2006")
playing_statistics_8 = get_AvgAge(playing_statistics_8, AvgAge, "X2007")
playing_statistics_9 = get_AvgAge(playing_statistics_9, AvgAge, "X2008")
playing_statistics_10 = get_AvgAge(playing_statistics_10, AvgAge, "X2009")
playing_statistics_11 = get_AvgAge(playing_statistics_11, AvgAge, "X2010")
playing_statistics_12 = get_AvgAge(playing_statistics_12, AvgAge, "X2011")
playing_statistics_13 = get_AvgAge(playing_statistics_13, AvgAge, "X2012")
playing_statistics_14 = get_AvgAge(playing_statistics_14, AvgAge, "X2013")
playing_statistics_15 = get_AvgAge(playing_statistics_15, AvgAge, "X2014")
playing_statistics_16 = get_AvgAge(playing_statistics_16, AvgAge, "X2015")
playing_statistics_17 = get_AvgAge(playing_statistics_17, AvgAge, "X2016")
playing_statistics_18 = get_AvgAge(playing_statistics_18, AvgAge, "X2017")
#Get MatchWeek
get_mw=function(playing_stat){
j = 1
MatchWeek = rep(0,nrow(playing_stat))
for (i in 1:nrow(playing_stat)){
MatchWeek[i]=j
if ((i %% 10) == 0){
j = j + 1
}
}
playing_stat['MW'] = MatchWeek
return(playing_stat)
}
playing_statistics_1 = get_mw(playing_statistics_1)
playing_statistics_2 = get_mw(playing_statistics_2)
playing_statistics_3 = get_mw(playing_statistics_3)
playing_statistics_4 = get_mw(playing_statistics_4)
playing_statistics_5 = get_mw(playing_statistics_5)
playing_statistics_6 = get_mw(playing_statistics_6)
playing_statistics_7 = get_mw(playing_statistics_7)
playing_statistics_8 = get_mw(playing_statistics_8)
playing_statistics_9 = get_mw(playing_statistics_9)
playing_statistics_10 = get_mw(playing_statistics_10)
playing_statistics_11 = get_mw(playing_statistics_11)
playing_statistics_12 = get_mw(playing_statistics_12)
playing_statistics_13 = get_mw(playing_statistics_13)
playing_statistics_14 = get_mw(playing_statistics_14)
playing_statistics_15 = get_mw(playing_statistics_15)
playing_statistics_16 = get_mw(playing_statistics_16)
playing_statistics_17 = get_mw(playing_statistics_17)
playing_statistics_18 = get_mw(playing_statistics_18)
# Combining to one dataset
playing_stat = rbind(playing_statistics_1,
playing_statistics_2,
playing_statistics_3,
playing_statistics_4,
playing_statistics_5,
playing_statistics_6,
playing_statistics_7,
playing_statistics_8,
playing_statistics_9,
playing_statistics_10,
playing_statistics_11,
playing_statistics_12,
playing_statistics_13,
playing_statistics_14,
playing_statistics_15,
playing_statistics_16,
playing_statistics_17,
playing_statistics_18)
### Add distance between clubs playing grounds (air distance in km)
distances=read.csv("distances.csv",row.names = 1)
colnames(distances)=str_replace_all(colnames(distances), fixed("."), "")
rownames(distances)=str_replace_all(rownames(distances), fixed(" "), "")
get_distance=function(playing_statd){
Distance = rep(0,nrow(playing_statd))
for (i in 1:nrow(playing_statd)){
ht = playing_statd$HomeTeam[i]
at = playing_statd$AwayTeam[i]
Distance[i]=distances[ht,at]
}
playing_statd["Distance"] = Distance
return (playing_statd)
}
playing_stat=get_distance(playing_stat)
####################################
# Identify Win/Loss Streaks if any.
get_3game_ws=function(string){
for (i in 1:nrow(string)){
if (string == 9){
return(1)
}else{
return(0)
}
}
}
get_5game_ws=function(string){
if (string == 15){
return(1)
}else{
return(0)
}
}
get_3game_ls=function(string){
if (string == 0){
return(1)
}else{
return(0)
}
}
get_5game_ls=function(string){
if (string == '0'){
return(1)
}else{
return(0)
}
}
playing_stat['HTWinStreak3'] = ifelse(playing_stat["HM3"]==9,1,0)
playing_stat['HTWinStreak5'] = ifelse(playing_stat["HM5"]==15,1,0)
playing_stat['HTLossStreak3'] = ifelse(playing_stat["HM3"]==0,1,0)
playing_stat['HTLossStreak5'] = ifelse(playing_stat["HM5"]==0,1,0)
playing_stat['ATWinStreak3'] = ifelse(playing_stat["AM3"]==9,1,0)
playing_stat['ATWinStreak5'] = ifelse(playing_stat["AM5"]==15,1,0)
playing_stat['ATLossStreak3'] = ifelse(playing_stat["AM3"]==0,1,0)
playing_stat['ATLossStreak5'] = ifelse(playing_stat["AM5"]==0,1,0)
# Get Goal Difference
playing_stat['HTGD'] = playing_stat['HTGS'] - playing_stat['HTGC']
playing_stat['ATGD'] = playing_stat['ATGS'] - playing_stat['ATGC']
# Diff in points
playing_stat['DiffPts'] = playing_stat['HTP'] - playing_stat['ATP']
diff_form=function(playing_stat){
HM5max=apply(cbind(playing_stat['HM5'],playing_stat['HM4'],playing_stat['HM3'],playing_stat['HM2'],playing_stat['HM1']),1,max)
AM5max=apply(cbind(playing_stat['AM5'],playing_stat['AM4'],playing_stat['AM3'],playing_stat['AM2'],playing_stat['AM1']),1,max)
HM5max=as.numeric(HM5max)
AM5max=as.numeric(AM5max)
return(HM5max-AM5max)
}
playing_stat['DiffFormPts'] = diff_form(playing_stat)
# Diff in last year positions
playing_stat['DiffLP'] = playing_stat['HomeTeamLP'] - playing_stat['AwayTeamLP']
# Scale DiffPts , DiffFormPts, HTGD, ATGD by Matchweek.
cols = c('HTGD','ATGD','DiffPts','DiffFormPts','HTP','ATP','HTS','ATS','HTST','ATST')
for (col in cols){
playing_stat[col] = playing_stat[col] / playing_stat$MW
}
write.csv(playing_stat,"final_dataset.csv")
}
setwd("D:/Het Project/Premier league/Voetbal-voorspellen")
used.packages=c("xgboost","stringr","qlcMatrix","rBayesianOptimization","mailR","rJava","e1071")
not.installed=!(used.packages %in% rownames(installed.packages()))
if(length(used.packages[not.installed])>0){
install.packages(used.packages[not.installed])
}
library("xgboost")  # the main algorithm
library("caret")    # for the confusionmatrix() function (also needs e1071 package)
library("dplyr")    # for some data preperation
library("stringr")
library("DiagrammeR")
library("qlcMatrix")
library("rBayesianOptimization")
library("mailR")
library("rJava")
if(!exists("foo", mode="function")) source("cleaningandpreparing.R")
# import and prepare the data and eventually save it as csv
preparation()
# download that csv for further use and prediction
dataf=read.csv("final_dataset.csv")
# Separate into feature set and target variable
#FTR = Full Time Result (H=Home Win, D=Draw, A=Away Win)
x_all = dataf[,-which(names(dataf)=='FTR')]
y_all = dataf['FTR']
#Standardising the data
#Center to the mean and component wise scale to unit variance.
cols = c('HTGD','ATGD','HTP','ATP','DiffLP','AwayAvgAge','HomeAvgAge','HTS','ATS','HTST','ATST')
x_all[cols] = scale(x_all[cols])
#last 3 matches for both sides
x_all$HM3 = ifelse((x_all$HM3-x_all$HM2)==3,"W",ifelse((x_all$HM3-x_all$HM2)==1,"D",ifelse((x_all$HM3-x_all$HM2)==0&x_all$MW>1,"L","NM")))
x_all$HM2 = ifelse((x_all$HM2-x_all$HM1)==3,"W",ifelse((x_all$HM2-x_all$HM1)==1,"D",ifelse((x_all$HM2-x_all$HM1)==0&x_all$MW>2,"L","NM")))
x_all$HM1 = ifelse(x_all$HM1==3,"W",ifelse(x_all$HM1==1,"D",ifelse((x_all$HM1)==0&x_all$MW>3,"L","NM")))
x_all$AM3 = ifelse((x_all$AM3-x_all$AM2)==3,"W",ifelse((x_all$AM3-x_all$AM2)==1,"D",ifelse((x_all$AM3-x_all$AM2)==0&x_all$MW>1,"L","NM")))
x_all$AM2 = ifelse((x_all$AM2-x_all$AM1)==3,"W",ifelse((x_all$AM2-x_all$AM1)==1,"D",ifelse((x_all$AM2-x_all$AM1)==0&x_all$MW>2,"L","NM")))
x_all$AM1 = ifelse(x_all$AM1==3,"W",ifelse(x_all$AM1==1,"D",ifelse((x_all$AM1)==0&x_all$MW>3,"L","NM")))
# Change categorial columns into dummy columns
n <- names(x_all)
f <- as.formula(paste("~ -1 +", paste(n[!n %in% c("X","Date")], collapse = "+")))
A <- model.matrix(f,x_all)
head(A)
A=as.data.frame(A)
x_featured=A[,c('HTP', 'ATP', 'HM1L', 'HM1W','HM1NM', 'HM2L', 'HM2W','HM2NM', 'HM3L', 'HM3W','HM3NM',
'AM1L','AM1NM', 'AM1W', 'AM2L', 'AM2W','AM2NM', 'AM3L', 'AM3W','AM3NM', 'HTGD', 'ATGD',
"DiffPts", 'DiffFormPts', 'DiffLP','Distance','AwayAvgAge','HomeAvgAge','HTS','ATS',
'HTST','ATST')]
df=cbind(x_featured,y_all)
# FTR naar cijfers converteren, beginnend met 0
df$FTRC=ifelse(df$FTR=="H",0,ifelse(df$FTR=="D",1,2))
dat=df[-which(names(df)=="FTR")]
# set seed for reproducibility
set.seed(999)
# Make split index based on the last ten rows are the coming matches
fixtures.coming=c((nrow(dat)-9):nrow(dat))
train_index <- dat[-fixtures.coming,]
# Full data set
data_variables <- as.matrix(dat[,-which(names(dat)=="FTRC")])
data_label <- dat[,"FTRC"]
data_matrix <- xgb.DMatrix(data = as.matrix(dat), label = data_label)
# split train data and make xgb.DMatrix
train_data   <- data_variables[-fixtures.coming,]
train_label  <- data_label[-fixtures.coming]
train_matrix <- xgb.DMatrix(data = train_data, label = train_label)
# split test data and make xgb.DMatrix
predict_data  <- data_variables[fixtures.coming,]
predict_label <- data_label[fixtures.coming]
predict_matrix <- xgb.DMatrix(data = predict_data, label = predict_label)
numberOfClasses <- length(unique(dat$FTRC))
xgb_params <- list("max_depth"=3,"eta"=0.5,
"colsample_bytree"=0.9,
"objective" = "multi:softprob",
"eval_metric" = "mlogloss",
"min_child_weight"=7,
"subsample"=0.8,
"alpha"=0,
"lambda"=1,
"num_class" = numberOfClasses)
nround    <- 7 # number of XGBoost rounds
cv.nfold  <- 10
bst_model <- xgb.train(params = xgb_params,
data = train_matrix,
nrounds = nround)
# Predict hold-out test set
test_pred <- predict(bst_model, newdata = predict_matrix)
test_prediction <- matrix(test_pred, nrow = numberOfClasses,
ncol=length(test_pred)/numberOfClasses) %>%
t() %>%
data.frame() %>%
mutate(max_prob = max.col(., "last"))
test_prediction[,c("Date","HomeTeam","AwayTeam")]=x_all[fixtures.coming,c("Date","HomeTeam","AwayTeam")]
test_prediction$HomeTeam=as.character(test_prediction$HomeTeam)
test_prediction$AwayTeam=as.character(test_prediction$AwayTeam)
test_prediction$Homeodd=1/test_prediction$Home
test_prediction$Drawodd=1/test_prediction$Draw
test_prediction$Awayodd=1/test_prediction$Away
names(test_prediction)[c(1:3)]=c("Home","Draw","Away")
test_prediction$PredictedOutcome=ifelse(test_prediction$max_prob==1,test_prediction$HomeTeam,ifelse(test_prediction$max_prob==3,test_prediction$AwayTeam,"Draw"))
print(test_prediction)
write.csv(test_prediction,paste("prediction_MW",(nrow(dataf) %% 380)/10,"_",tail(dataf$Date,n=1),".csv",sep = ""))
# send.mail(from = "r.notification.kdh@gmail.com",
#           to = "kasperde@hotmail.com",
#           subject = "Inkoop advies",
#           body = "Inkoop moment is gesignaleerd",
#           smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "r.notification.kdh", passwd = "gle1992Dwizgh?!", SSL = TRUE),
#           authenticate = TRUE,
#           send = TRUE)
750/9.5
